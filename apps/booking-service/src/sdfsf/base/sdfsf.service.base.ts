/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Sdfsf as PrismaSdfsf } from "@prisma/client";

export class SdfsfServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SdfsfCountArgs, "select">): Promise<number> {
    return this.prisma.sdfsf.count(args);
  }

  async sdfsfs(args: Prisma.SdfsfFindManyArgs): Promise<PrismaSdfsf[]> {
    return this.prisma.sdfsf.findMany(args);
  }
  async sdfsf(args: Prisma.SdfsfFindUniqueArgs): Promise<PrismaSdfsf | null> {
    return this.prisma.sdfsf.findUnique(args);
  }
  async createSdfsf(args: Prisma.SdfsfCreateArgs): Promise<PrismaSdfsf> {
    return this.prisma.sdfsf.create(args);
  }
  async updateSdfsf(args: Prisma.SdfsfUpdateArgs): Promise<PrismaSdfsf> {
    return this.prisma.sdfsf.update(args);
  }
  async deleteSdfsf(args: Prisma.SdfsfDeleteArgs): Promise<PrismaSdfsf> {
    return this.prisma.sdfsf.delete(args);
  }
}

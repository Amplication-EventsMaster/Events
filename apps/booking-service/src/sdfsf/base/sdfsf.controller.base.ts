/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SdfsfService } from "../sdfsf.service";
import { SdfsfCreateInput } from "./SdfsfCreateInput";
import { Sdfsf } from "./Sdfsf";
import { SdfsfFindManyArgs } from "./SdfsfFindManyArgs";
import { SdfsfWhereUniqueInput } from "./SdfsfWhereUniqueInput";
import { SdfsfUpdateInput } from "./SdfsfUpdateInput";

export class SdfsfControllerBase {
  constructor(protected readonly service: SdfsfService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Sdfsf })
  async createSdfsf(@common.Body() data: SdfsfCreateInput): Promise<Sdfsf> {
    return await this.service.createSdfsf({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Sdfsf] })
  @ApiNestedQuery(SdfsfFindManyArgs)
  async sdfsfs(@common.Req() request: Request): Promise<Sdfsf[]> {
    const args = plainToClass(SdfsfFindManyArgs, request.query);
    return this.service.sdfsfs({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Sdfsf })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async sdfsf(
    @common.Param() params: SdfsfWhereUniqueInput
  ): Promise<Sdfsf | null> {
    const result = await this.service.sdfsf({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Sdfsf })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSdfsf(
    @common.Param() params: SdfsfWhereUniqueInput,
    @common.Body() data: SdfsfUpdateInput
  ): Promise<Sdfsf | null> {
    try {
      return await this.service.updateSdfsf({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Sdfsf })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSdfsf(
    @common.Param() params: SdfsfWhereUniqueInput
  ): Promise<Sdfsf | null> {
    try {
      return await this.service.deleteSdfsf({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
